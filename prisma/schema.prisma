// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  isAdmin       Boolean   @default(false)
  password      String?
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  Profile  Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SubscriptionPlan {
  id          String  @id @default(cuid())
  label       String
  description String
  price       Float
  per         String
  active      Boolean @default(true)

  Profile Profile[]
}

model Profile {
  id            String   @id @default(cuid())
  goal          String
  name          String
  dob           DateTime
  gender        String
  activityLevel String   @default("LOW")
  // weight    Float
  // height    Float
  objective     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId             String            @unique
  user               User              @relation(fields: [userId], references: [id])
  subscriptionPlanId String?
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])

  dietPlans DietPlan[]
  records   Record[]
}

model Record {
  id String @id @default(cuid())

  weight    Float
  height    Float
  createdAt DateTime @default(now())

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])
}

model DietPlan {
  id String @id @default(cuid())

  startDate DateTime
  endDate   DateTime
  active    Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  dietPortions DietPortion[]
}

model DietPortion {
  id    String @id @default(cuid())
  label String
  order Int

  dietPlanId String
  dietPlan   DietPlan @relation(fields: [dietPlanId], references: [id])

  contents DietPortionItem[]
}

model DietPortionItem {
  id String @id @default(cuid())

  dietPortionId String
  dietPortion   DietPortion @relation(fields: [dietPortionId], references: [id])
  dietItemId    String
  item          DietItem    @relation(fields: [dietItemId], references: [id])
}

model DietItem {
  id    String @id @default(cuid())
  label String

  choServes     Int
  protienServes Int
  fatServes     Int

  dietPlanPortions DietPortionItem[]
}
